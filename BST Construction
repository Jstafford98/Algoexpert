import java.util.*;

class Program {
	
  static class BST {
    public int value;
    public BST left;
    public BST right;

    public BST(int value) {
      this.value = value;
			left = null ;
			right = null ;
    }
    public BST insert(int value) {
	
			//Needs to insert left
			if (value < this.value){
				if (left == null)	
					left = new BST(value) ;
				else 
					left.insert(value) ;
			
			//Needs to insert right
			} else {
				if (right == null)
					right = new BST(value) ;
			  else 
					right.insert(value) ;
			}
			
			//Return
      return this;
    }
    public boolean contains(int value) {
      
			//If this is a leaf node
			if (left == null && right == null){
				return this.value == value ;
				
			//This is a root or inner node
			} else {
				
				//Match
				if (this.value == value)
					return true ;
				
				//No Match, need to go left
				else if (left != null && value < this.value)
					return left.contains(value) ;
				
				//No match, need to go right
				else if (right != null && value > this.value)
					return right.contains(value) ;
				
				//No match, however it is impossible there is a match elsewhere in tree. 
				else 
					return false ;
			}
    }
		public BST remove(int value){
			remove(value,null) ;
			return this ;
		}
    public void remove(int value, BST parent) {
			
			//This node is smaller than the value
			if (this.value < value){
				// go right
				if (right != null)
					right.remove(value,this) ;
			//This node is greater than the value
			} else if (this.value > value){
				//go left
				if (left != null)
					left.remove(value,this) ;
			//This is the node that is the value
			} else {
				
				//Check for inner node
				if (left != null && right != null){
					this.value = right.findMinimumValueInTree() ; //Set this to the smallest value in tree from this point on the right 
					right.remove(this.value,this) ;//Shifts all values up one by deleting that node and then calling for the next.
					
				//Check if root 
				} else if (parent == null){
					
					//We try to shift left into position first, otherwise shift right up. 
					if (left != null){
						this.value = left.value ;
						right = left.right ;
						left = left.left ;
						
					} else if (right != null) {
						this.value = right.value ;
						right = right.right ;
						left = right.left ;
						
					} else {
						//Do nothing, single node tree
					}		
					
				//Check if left leaf node of parent
				} else if (parent.left == this){
					parent.left = left == null ? right : left ;
					
				//Check if right leaf node of parent
				} else if (parent.right == this){
					parent.right = right == null ? left : right ;
				}
			}
    }
		public int findMinimumValueInTree(){
			if (left == null)
				return this.value ;
			return left.findMinimumValueInTree() ;
		}
  }
}
//End of file
